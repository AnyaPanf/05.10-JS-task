// Написать функцию, которая принимает массив строк и возвращает новую строку из всех элементов этого массива, 
//объединенных в одну строку с использованием метода .reduce()

// const getArr = (arr) => {
//  return arr.reduce((acc,rec) => {
//      return `${acc} ${rec}` 
// }, " ")
// }
// console.log(getArr(['Привет!','вот','это','задача']));


// Написать функцию, которая принимает массив строк и возвращает количество символов во всех строках с использованием метода .reduce()

// const getSym = (arr) => {
//     return arr.reduce((acc,rec) => {
//         return acc + rec.length 
//     }, 0)
// }
// console.log(getSym(['Привет!','вот','это','задача']));


//написать функцию, которая принимает массив чисел и возвращает новый массив, состоящий только из элементов, 
// которые больше заданного значения с использованием метода .reduce()

// const getNum = (arr) => {
//   let num = 11
//  return newArr = arr.filter((el) => {
//     return el > num
//  }).reduce((acc,rec) => {
//     return acc = [...acc,rec]
//  },[])
// }
// console.log(getNum([1,2,3,4,10,20,30,99]));
// Отличная работа, попробуйте сделать эту же задачу только методом reduce() без использования filter()

